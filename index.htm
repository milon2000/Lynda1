<!DOCTYPE html>
<html lang="en-US">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Basic Grid</title>
  <link href="link href=" https://fonts.googleapis.com/css?family=Quattrocento+Sans:400,400i,700 " rel="stylesheet " />
  <link rel="stylesheet " href="style-main.css " type="text/css " media="all " />
</head>

<body class="site ">

  <header class="masthead ">
    <div class="logo ">G</div>
    <h2 class="site-title ">is for grid</h2>
  </header><!--.mathead-->

  <figure class="banner ">
    <img src="images/my.jpg " alt="Koty i my ">
  </figure><!--.banner-->

  <main class="main-area ">

    <section class="splash ">
      <div class="splash-content ">
        <h2 class="content-title ">Full Bleed CSS Grid</h2>
        <div class="splash-text ">
          <p>Grid provides a trivial solution to a complex problem: How to display full-bleed content mixed with center-aligned width-constrained content. This solution ellimiates the need for auto-margins and floats while allowing the developer to change the grid globally and see those changes apply to each element individually.</p>
        </div><!--.splash-text-->
      </div><!--.splash-content-->
    </section><!--.splash-->

    <section class="buckets ">
      <ul>
        <li>
          <img src="images/my.jpg " alt="My i koty ">
          <div class="bucket ">
            <h2 class="bucket-title ">Grid is great</h2>
              <p>That said, Grid is not always the right option for layouts. If for example you need to lay out a series of identical boxes like those you see here, Flex may be a better option.</p>
          </div><!--.bucket-->
        </li>
        <li>
          <img src="images/my.jpg " alt="Koty i my ">
          <div class="bucket ">
            <h2 class="bucket-title ">Flex is great too</h2>
              <p>The solution provided here is limited by the lack of support for subgrids. If subgrids were available, the solution would be more refined. In lieu of subgrid, the solution applies a grid to each full-bleed section within the layout using a common class <code>.grid</code> and creates the full-bleed/centered effect that way.</p>
          </div><!--.bucket-->
        </li>
      </ul>
    </section><!--.buckets-->

    <section class="more ">
      <div class="more-content ">
        <h2 class="more-title ">Subgrid would be nice here</h2>
          <p>The solution provided here is limited by the lack of support for subgrids. If subgrids were available, the solution would be more refined. In lieu of subgrid, the solution applies a grid to each full-bleed section within the layout using a common class <code>.grid</code> and creates the full-bleed/centered effect that way.</p>
      </div><!--.more-content-->
    </section><!--.more-->

  </main><!--.main-area-->

  <aside class="aside-area ">
    <div class="twin ">
      <h2 class="twin-title ">Grid lets you do unusual things</h2>
      <p>Creating this layout, where two items share the total available viewport width evenly alongside full-width and centered content, is suprisingly complex if you don't have CSS Grid available.</p>
    </div><!--.twin-->
    <div class="twin ">
      <h2 class="twin-title ">Grid requires a rethink</h2>
      <p>Seeing this layout you may still think it's better to just use old methods with auto-margins and max-widths. And you <em>can</em>, but looking at the CSS you'll see the Grid approach is both cleaner and easier to understand.</p>
    </div><!--twin-->
  </aside><!--.aside.area-->

  <footer class="colophon ">
    <h2 class="colophon-class ">No to koniec</h2>
  </footer>


</body>

</html>
